CREATE DATABASE Seminar_2;

USE Seminar_2;

drop table if exists films; 
CREATE TABLE films (
	film_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    year YEAR NOT NULL,
    length INT NOT NULL,
    description TEXT NOT NULL
);

INSERT INTO films (name, year, length, description)
VALUES 
	('Игры разума',  2001, 135, 'От всемирной известности до греховных глубин — все это познал на своей шкуре Джон Форбс Нэш-младший. Математический гений, он на заре своей карьеры сделал титаническую работу в области теории игр, которая перевернула этот раздел математики и практически принесла ему международную известность. Однако буквально в то же время заносчивый и пользующийся успехом у женщин Нэш получает удар судьбы, который переворачивает уже его собственную жизнь.'),
	('Форрест Гамп',  1994, 142, 'Сидя на автобусной остановке, Форрест Гамп — не очень умный, но добрый и открытый парень — рассказывает случайным встречным историю своей необыкновенной жизни. С самого малолетства парень страдал от заболевания ног, соседские мальчишки дразнили его, но в один прекрасный день Форрест открыл в себе невероятные способности к бегу. Подруга детства Дженни всегда его поддерживала и защищала, но вскоре дороги их разошлись.'),
	('Иван Васильевич меняет профессию',  1998, 128,'Инженер-изобретатель Тимофеев сконструировал машину времени, которая соединила его квартиру с далеким шестнадцатым веком - точнее, с палатами государя Ивана Грозного. Туда-то и попадают тезка царя пенсионер-общественник Иван Васильевич Бунша и квартирный вор Жорж Милославский. На их место в двадцатом веке «переселяется» великий государь. Поломка машины приводит ко множеству неожиданных и забавных событий...'),
	('Назад в будущее',  1985, 116, 'Подросток Марти с помощью машины времени, сооружённой его другом-профессором доком Брауном, попадает из 80-х в далекие 50-е. Там он встречается со своими будущими родителями, ещё подростками, и другом-профессором, совсем молодым.'),
	('Криминальное чтиво',  1994, 154, '');
    
SELECT *
FROM films;    

/*
Задача 1.
Что покажет следующий запрос?
*/

SELECT *
FROM Orders
WHERE date BETWEEN '2017-01-01' AND '2017-12-31'

# Покажет все данные по заказам, совершенным за 2017 год.
# Т.е. обе даты включены.

/*
Задача 2. 
*/

# переименовать таблицу
RENAME TABLE films TO movies; 

# добавить столбец
ALTER TABLE movies
ADD COLUMN country VARCHAR(50); 

# удалить столбец
ALTER TABLE movies
DROP COLUMN country;

# очистить таблицу от данных
# останется структура таблицы, но удалятся все данные
TRUNCATE TABLE cinema;

# полностью удалить таблицу из базы данных
DROP TABLE cinema;

# Добавление и удаление внешнего ключа
ALTER TABLE cinema
ADD FOREIGN KEY(producer_id) REFERENCES producer(Id);



/*
Задача 3. В зависимости от поля “grade”, 
установите еще один столбец с именем class в зависимости от значений класса.
A++ – DISTINCTION,A+ – FIRST CLASS, A – SECOND CLASS, B+ – SECOND CLASS, 
C+ – THIRD CLASS, ALL OTHERS – FAIL
*/

SELECT class,
  CASE 
	WHEN grade = 'A++' THEN 'DISTINCTION'
	WHEN grade = 'A+' THEN 'FIRST CLASS'
    WHEN grade = 'A' or grade = 'B+' THEN 'SECOND CLASS'
    WHEN grade = 'C+' THEN 'THIRD CLASS'
  ELSE 'FAIL'
  end as class
FROM table_name;

/* Задача 4. 
Расставим студентам классы в зависимости от оценок.

Total_marks > 450 – «ПЕРВЫЙ КЛАСС С ОТЛИЧИЕМ»
Total_marks от 400 до 450 – «ПЕРВЫЙ КЛАСС»
Total_marks от 350 до 400 – «ВТОРОЙ КЛАСС»
Total_marks от 300 до 350 – «ТРЕТИЙ КЛАСС»
В противном случае - НЕУДАЧА
*/

select *, CASE
		WHEN total_marks > 450 THEN 'ПЕРВЫЙ КЛАСС С ОТЛИЧИЕМ'
        WHEN total_marks between 400 AND  450 THEN 'ПЕРВЫЙ КЛАСС'
        WHEN total_marks between 350 and 399 THEN 'ВТОРОЙ КЛАСС'
        WHEN total_marks between 300 AND 349  THEN 'ТРЕТИЙ КЛАСС'
        ELSE 'НЕУДАЧА'
        END as class
        from studentmarks;

/*
Задача 5. 
Оценка посещаемости студента.
1. Проверьте истинность выражения, используя оператор "IF"
Если 100<200, то печатаем 'yes'; иначе - 'no'
*/
SELECT IF (100<200, 'yes', 'no')

/*
2. В зависимости от общего количество баллов, 
укажите статус ученик в табеле успеваемости: 
если суммарное количество баллов больше 450, 
то студент закончил на “Отлично”; иначе - “Хорошо”

+ "Удовлетворительно" (2 IF)
*/

SELECT *
	IF (total_marks > 450, 'Отлично', 'Хорошо') as result
FROM students_marks;

SELECT
	IF (total_marks > 450, 'Отлично', 'Хорошо', 
    IF (total_marks > 400, 'Хорошо', 'Удовлетворительно')) as result
FROM students_marks;

